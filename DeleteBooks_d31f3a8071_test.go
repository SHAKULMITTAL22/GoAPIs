// Test generated by RoostGPT for test roost-test using AI Type Vertex AI and AI Model code-bison


    func TestDeleteBooks_SuccessfulDeletion(t *testing.T) {
        // Arrange
        book1 := Book{ID: 1, Title: "Book 1", Author: "Author 1"}
        book2 := Book{ID: 2, Title: "Book 2", Author: "Author 2"}
        books := []Book{book1, book2}
        
        // Act
        deleteBooks(nil, &http.Request{})
        
        // Assert
        expected Books := []Book{{ID: 2, Title: "Book 2", Author: "Author 2"}}
        assert.Equal(t, expectedBooks, books)
    }
    
    func TestDeleteBooks_NonExistentBook(t *testing.T) {
        // Arrange
        book1 := Book{ID: 1, Title: "Book 1", Author: "Author 1"}
        book2 := Book{ID: 2, Title: "Book 2", Author: "Author 2"}
        books := []Book{book1, book2}
        
        // Act
        deleteBooks(&http.ResponseWriter{}, &http.Request{Params: map[string][]string{"id": "3"}})
        
        // Assert
        expected Books := []Book{{ID: 1, Title: "Book 1", Author: "Author 1"}, {ID: 2, Title: "Book 2", Author: "Author 2"}}
        assert.Equal(t, expectedBooks, books)
    }
    
    func TestDeleteBooks_MultipleBooksWithSameID(t *testing.T) {
        // Arrange
        book1 := Book{ID: 1, Title: "Book 1", Author: "Author 1"}
        book2 := Book{ID: 1, Title: "Book 2", Author: "Author 2"}
        books := []Book{book1, book2}
        
        // Act
        deleteBooks(&http.ResponseWriter{}, &http.Request{Params: map[string][]string{"id": "1"}})
        
        // Assert
        expected Books := []Book{{ID: 2, Title: "Book 2", Author: "Author 2"}}
        assert.Equal(t, expectedBooks, books)
    }
    
    func TestDeleteBooks_InvalidParameter(t *testing.T) {
        // Arrange
        book1 := Book{ID: 1, Title: "Book 1", Author: "Author 1"}
        books := []Book{book1}
        
        // Act
        deleteBooks(&http.ResponseWriter{}, &http.Request{Params: map[string][]string{"random": "parameter"}})
        
        // Assert
        expected Error := `invalid parameter "random"`
        assert.Error(t, expectedError)
    }
    
    func TestDeleteBooks_ServerError(t *testing.T) {
        // Arrange
        book1 := Book{ID: 1, Title: "Book 1", Author: "Author 1"}
        books := []Book{book1}
        
        // Act
        deleteBooks(&http.ResponseWriter{StatusCode: 500}, &http.Request{Params: map[string][]string{"id": "1"}})
        
        // Assert
        expected Error := `server error`
        assert.Error(t, expectedError)
    }