// Test generated by RoostGPT for test roost-test using AI Type Vertex AI and AI Model code-bison


    func TestDeleteBooks_DeletesCorrectBook(t *testing.T) {
        // Arrange
        book := Book{ID: 1, Title: "The Great Gatsby"}
        books := []Book{{ID: 2, Title: "To Kill A Mockingbird"}, {ID: 3, Title: "Pride And Prejudice"}}
        
        // Act
        deleteBooks(nil, Request{})
        
        // Assert
        if len(books)!= 2 {
            t.Errorf("Expected %d books, got %d", 2, len(books))
        } else if books[0].ID!= 2 || books[1].ID!= 3 {
            t.Errorf("Expected books %v, got %v", []int{2, 3}, books)
        }
    }
    
    func TestDeleteBooks_DoesNotDeleteNonMatchingBooks(t *testing.T) {
        // Arrange
        book := Book{ID: 1, Title: "The Great Gatsby"}
        books := []Book{{ID: 2, Title: "To Kill A Mockingbird"}, {ID: 3, Title: "Pride And Prejudice"}, {ID: 4, Title: "Moby Dick"}}
        
        // Act
        deleteBooks(nil, Request{"id": 5})
        
        // Assert
        if len(books)!= 3 {
            t.Errorf("Expected %d books, got %d", 3, len(books))
        } else if books[0].ID!= 2 || books[1].ID!= 3 || books[2].ID!= 4 {
            t.Errorf("Expected books %v, got %v", []int{2, 3, 4}, books)
        }
    }
    
    func TestDeleteBooks_ReturnsCorrectJSON(t *testing.T) {
        // Arrange
        book := Book{ID: 1, Title: "The Great Gatsby"}
        books := []Book{{ID: 2, Title: "To Kill A Mockingbird"}, {ID: 3, Title: "Pride And Prejudice"}}
        
        // Act
        resp := make(http.Response)
        deleteBooks(resp, Request{"id": 2})
        
        // Assert
        if resp.StatusCode!= http.StatusOK {
            t.Errorf("Expected status code %d, got %d", http.StatusOK, resp.StatusCode)
        } else {
            var decoded Books
            err := json.Unmarshal([]byte(resp.Body), &decoded)
            if err!= nil {
                t.Errorf("Failed to unmarshal JSON response: %v", err)
            } else if len(decoded)!= 2 {
                t.Errorf("Expected %d books, got %d", 2, len(decoded))
            } else if decoded[0].ID!= 2 || decoded[1].ID!= 3 {
                t.Errorf("Expected books %v, got %v", []int{2, 3}, decoded)
            }
        }
    }
    
    func TestDeleteBooks_HandlesNilParameter(t *testing.T) {
        // Arrange
        
        // Act
        deleteBooks(nil, Request{})
        
        // Assert
        if len(books)!= 0 {
            t.Errorf("Expected empty list of books, got %v", books)
        }
    }
    
    func TestDeleteBooks_HandlesInvalidParameter(t *testing.T) {
        // Arrange
        book := Book{ID: 1, Title: "The Great Gatsby"}
        books := []Book{{ID: 2, Title: "To Kill A Mockingbird"}, {ID: 3, Title: "Pride And Prejudice"}}
        
        // Act
        deleteBooks(nil, Request{"id": " invalid"})
        
        // Assert
        if len(books)!= 3 {
            t.Errorf("Expected %d books, got %d", 3, len(books))
        } else if books[0].ID!= 2 || books[1].ID!= 3 || books[2].ID!= 4 {
            t.Errorf("Expected books %v, got %v", []int{2, 3, 4}, books)
        }
    }