// Test generated by RoostGPT for test Unit-golang-test using AI Type Open AI and AI Model gpt-4

package main

import (
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"

	"github.com/gorilla/mux"
)

type Book struct {
	ID    string
	Isbn  string
	Title string
}

var books = []Book{
	Book{ID: "1", Isbn: "1234", Title: "Book One"},
	Book{ID: "2", Isbn: "5678", Title: "Book Two"},
}

func deleteBooks(w http.ResponseWriter, r *http.Request) {
	// delete logic here
}

func TestDeleteBooks_d31f3a8071(t *testing.T) {
	req, err := http.NewRequest("DELETE", "/book/1", nil)
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	router := mux.NewRouter()
	router.HandleFunc("/book/{id}", deleteBooks)
	router.ServeHTTP(rr, req)

	expected := `[
		{
			"ID": "2",
			"Isbn": "5678",
			"Title": "Book Two"
		}
	]`

	if rr.Code != http.StatusOK {
		t.Errorf("Expected status OK; got %v", rr.Code)
	}

	if rr.Body.String() != strings.Trim(expected, "\n") {
		t.Errorf("Unexpected body in response: %q", rr.Body.String())
	}

	req, err = http.NewRequest("DELETE", "/book/3", nil)
	if err != nil {
		t.Fatal(err)
	}

	rr = httptest.NewRecorder()
	router.ServeHTTP(rr, req)

	if rr.Code != http.StatusOK {
		t.Errorf("Expected status OK; got %v", rr.Code)
	}

	if rr.Body.String() != strings.Trim(expected, "\n") {
		t.Errorf("Unexpected body in response: %q", rr.Body.String())
	}
}
