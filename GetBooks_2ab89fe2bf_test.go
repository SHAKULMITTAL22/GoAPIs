// Test generated by RoostGPT for test golang-test-shakul using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

package books

import (
	"encoding/json"
	"fmt"
	"net/http"
	"testing"

	"github.com/gorilla/mux"
)

var books []book

type book struct {
	ID   int    `json:"id"`
	Title string `json:"title"`
	Author string `json:"author"`
}

func TestGetBooks(t *testing.T) {
	// Set up router
	r := mux.NewRouter()
	r.GET("/books", getBooks)

	// Create HTTP request
	req, err := http.NewRequest("GET", "/books", nil)
	if err!= nil {
		t.Fatal(err)
	}

	// Set up response writer
	w := httptest.NewRecorder()

	// Call the handler
	r.ServeHTTP(w, req)

	// Check status code
	if w.Code!= http.StatusOK {
		t.Errorf("expected %d, got %d", http.StatusOK, w.Code)
	}

	// Decode JSON response
	var resp []book
	err = json.NewDecoder(w.Body).Decode(&resp)
	if err!= nil {
		t.Errorf("error decoding JSON: %v", err)
	}

	// Check response data
	if len(resp) == 0 {
		t.Errorf("expected non-empty response")
	}

	// Check first item's ID
	if resp[0].ID!= 1 {
		t.Errorf("expected ID 1, got %d", resp[0].ID)
	}
}

func TestGetBooks_Empty(t *testing.T) {
	// Set up router
	r := mux.NewRouter()
	r.GET("/books", getBooks)

	// Create HTTP request
	req, err := http.NewRequest("GET", "/books", nil)
	if err!= nil {
		t.Fatal(err)
	}

	// Set up response writer
	w := httptest.NewRecorder()

	// Call the handler
	r.ServeHTTP(w, req)

	// Check status code
	if w.Code!= http.StatusOK {
		t.Errorf("expected %d, got %d", http.StatusOK, w.Code)
	}

	// Decode JSON response
	var resp []book
	err = json.NewDecoder(w.Body).Decode(&resp)
	if err!= nil {
		t.Errorf("error decoding JSON: %v", err)
	}

	// Check response data
	if len(resp)!= 0 {
		t.Errorf("expected empty response, got %+v", resp)
	}
}
