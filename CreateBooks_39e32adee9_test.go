// Test generated by RoostGPT for test golang-test-shakul using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

package books

import (
	"encoding/json"
	"fmt"
	"net/http"
	"testing"
)

func TestCreateBooks(t *testing.T) {
	// Successful creation of a book
	testCases := []struct {
		name string
		book  Book
	}{
		{
			name: "valid book",
			book: Book{
				Title:      "The Great Gatsby",
				Author:     "F. Scott Fitzgerald",
				Publisher:  "Charles Scribner's Sons",
				Publication: "1925-04-10",
			},
		},
		{
			name: "empty title",
			book: Book{
				Title: "",
				Author:     "F. Scott Fitzgerald",
				Publisher:  "Charles Scribner's Sons",
				Publication: "1925-04-10",
			},
		},
		{
			name: "invalid JSON",
			book: Book{
				Title:      "The Great Gatsby",
				Author:     "F. Scott Fitzgerald",
				Publisher:  "Charles Scribner's Sons",
				Publication: "1925-04-10",
				InvalidField: "this field should not exist",
			},
		},
	}

	for _, tc := range testCases {
		tc := tc
		t.Run(tc.name, func(t *testing.T) {
			// Set up mock HTTP request and response writer
			req, err := http.NewRequest("POST", "/books", bytes.NewBufferString(`{"title":""+tc.book.Title+"","author":""`+tc.book.Author+"`,\"publisher\":\""+tc.book.Publisher+"\",\"publication\":\""+tc.book.Publication+"\"}`))
			if err!= nil {
				t.Fatal(err)
			}
			resp := httptest.NewRecorder()

			createBooks(resp, req)

			// Check status code
			if resp.Code!= http.StatusCreated {
				t.Errorf("expected status code %d, got %d", http.StatusCreated, resp.Code)
			}

			// Check response body
			var actualBook Book
			err = json.NewDecoder(resp.Body).Decode(&actualBook)
			if err!= nil {
				t.Fatal(err)
			}
			if!reflect.DeepEqual(tc.book, actualBook) {
				t.Errorf("expected %v, got %v", tc.book, actualBook)
			}
		})
	}
}

type Book struct {
	Title      string `json:"title"`
	Author     string `json:"author"`
	Publisher  string `json:"publisher"`
	Publication string `json:"publication"`
	ID         string `json:"id"`
}
