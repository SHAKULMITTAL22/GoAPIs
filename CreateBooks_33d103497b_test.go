// Test generated by RoostGPT for test roost-test using AI Type Vertex AI and AI Model code-bison


    func TestCreateBooks_SuccessfulCreation(t *testing.T) {
        // Arrange
        var books []Book = make([]Book, 0)
        req, _ := http.NewRequest("POST", "/api/books", bytes.NewBufferString("{}"))
        
        // Act
        createBooks(req.HTTPResponse(), req)
        
        // Assert
        t.Assert().Len(books, 1)
        t.Logf("Created book ID %v", books[0].ID)
    }
    
    func TestCreateBooks_InvalidJSON(t *testing.T) {
        // Arrange
        var books []Book = make([]Book, 0)
        req, _ := http.NewRequest("POST", "/api/books", bytes.NewBufferString("{ invalid JSON}"))
        
        // Act
        createBooks(req.HTTPResponse(), req)
        
        // Assert
        t.Error().Contains("invalid character")
    }
    
    func TestCreateBooks_NilBody(t *testing.T) {
        // Arrange
        var books []Book = make([]Book, 0)
        req, _ := http.NewRequest("POST", "/api/books", nil)
        
        // Act
        createBooks(req.HTTPResponse(), req)
        
        // Assert
        t.Error().Contains("nil body")
    }
    
    func TestCreateBooks_NonValidID(t *testing.T) {
        // Arrange
        var books []Book = make([]Book, 0)
        req, _ := http.NewRequest("POST", "/api/books", bytes.NewBufferString("{\"id\": -1}"))
        
        // Act
        createBooks(req.HTTPResponse(), req)
        
        // Assert
        t.Error().Contains("negative id")
    }
    
    func TestCreateBooks_DuplicateID(t *testing.T) {
        // Arrange
        var books []Book = make([]Book, 0)
        req, _ := http.NewRequest("POST", "/api/books", bytes.NewBufferString("{\"id\": 1}"))
        books = append(books, Book{"1", "Title 1", "Author 1"})
        
        // Act
        createBooks(req.HTTPResponse(), req)
        
        // Assert
        t.Error().Contains("duplicate id")
    }
    
    func TestCreateBooks_MultipleCalls(t *testing.T) {
        // Arrange
        var books []Book = make([]Book, 0)
        req, _ := http.NewRequest("POST", "/api/books", bytes.NewBufferString("{\"id\": 2}"))
        books = append(books, Book{"2", "Title 2", "Author 2"})
        req, _ = http.NewRequest("POST", "/api/books", bytes.NewBufferString("{\"id\": 3}"))
        
        // Act
        createBooks(req.HTTPResponse(), req)
        createBooks(req.HTTPResponse(), req)
        
        // Assert
        t.Assert().Len(books, 2)
        t.Logf("Created book IDs %v", books[0].ID, books[1].ID)
    }