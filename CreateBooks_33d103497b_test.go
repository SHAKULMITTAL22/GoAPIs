// Test generated by RoostGPT for test roost-test using AI Type Vertex AI and AI Model code-bison






Here is a basic Go testing file that tests the functionality of our previous function:


package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"testing"

	"github.com/gorilla/mux"
)

type Book struct {
	ID     string `json:"id"`
	Title  string `json:"title"`
	Author string `json:"author"`
}

var books []Book

func TestCreateBook(t *testing.T) {
	router := mux.NewRouter()
	router.HandleFunc("/books", CreateBook).Methods("POST")

	req, err := http.NewRequest("POST", "/books", nil)
	if err!= nil {
		t.Fatal(err)
	}

	rec := httptest.NewRecorder()
	router.ServeHTTP(rec, req)

	if rec.Code!= http.StatusCreated {
		t.Fatalf("Expected response status to be %d but got %d", http.StatusOK, rec.Code)
	}

	var createdBook Book
	decoder := json.NewDecoder(rec.Body)
	if err := decoder.Decode(&createdBook); err!= nil {
		t.Error(err)
	}

	expectedBook := Book{
		ID:     "", // generated automatically by mock server
		Title:  "Test Title",
		Author: "<NAME>",
	}

	if!reflect.DeepEqual(createdBook, expectedBook) {
		t.Errorf("Expected response body to equal %+v but got %+v", expectedBook, createdBook)
	}
}

func CreateBook(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")

	var b Book
	if err := json.NewDecoder(r.Body).Decode(&b); err!= nil {
		panic(err)
	}

	b.ID = strconv.Itoa(len(books))
	books = append(books, b)

	json.NewEncoder(w).Encode(b)
}