// Test generated by RoostGPT for test golang-test-shakul using AI Type Open Source AI and AI Model meta-llama/Llama-2-13b-chat

package books

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"testing"

	"github.com/gorilla/mux"
)

func TestUpdateBooks(t *testing.T) {
	// Successful request
	{
		req, err := http.NewRequest("PUT", "/books/1", nil)
		if err!= nil {
			t.Fatal(err)
		}
		w := httptest.NewRecorder()
		updateBooks(w, req)
		if w.Code!= http.StatusOK {
			t.Errorf("expected status code %d, got %d", http.StatusOK, w.Code)
		}
	}

	// Invalid ID
	{
		req, err := http.NewRequest("PUT", "/books/-1", nil)
		if err!= nil {
			t.Fatal(err)
		}
		w := httptest.NewRecorder()
		updateBooks(w, req)
		if w.Code!= http.StatusBadRequest {
			t.Errorf("expected status code %d, got %d", http.StatusBadRequest, w.Code)
		}
	}

	// Non-existent book
	{
		req, err := http.NewRequest("PUT", "/books/999", nil)
		if err!= nil {
			t.Fatal(err)
		}
		w := httptest.NewRecorder()
		updateBooks(w, req)
		if w.Code!= http.StatusNotFound {
			t.Errorf("expected status code %d, got %d", http.StatusNotFound, w.Code)
		}
	}

	// Malformed JSON body
	{
		req, err := http.NewRequest("PUT", "/books/1", strings.NewReader(`{"name": "foo"`))
		if err!= nil {
			t.Fatal(err)
		}
		w := httptest.NewRecorder()
		updateBooks(w, req)
		if w.Code!= http.StatusUnprocessableEntity {
			t.Errorf("expected status code %d, got %d", http.StatusUnprocessableEntity, w.Code)
		}
	}
}
