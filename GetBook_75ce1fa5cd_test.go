// Test generated by RoostGPT for test roost-test using AI Type Vertex AI and AI Model code-bison






Here is a basic unit test written in Go to test the `getBook` function:

    package main
    
    import (
    	"encoding/json"
    	"net/http"
    	"testing"
    
    	"github.com/gorilla/mux"
    )
    
    type Book struct {
    	ID   string  `json:"id"`
    	Name string  `json:"name"`
    	Year int     `json:"year"`
    	Tags []string `json:"tags"`
    }
    
    var books = []Book{
    	{"123e4567-e89b-12d3-a456-426655440000", "Moby Dick", 1851, []string{}},
    	{"123e4567-e89b-12d3-a456-426655440001", "The Adventures of Tom Sawyer", 1876, []string{}},
    	{"123e4567-e89b-12d3-a456-426655440002", "The Great Gatsby", 1925, []string{}},
    }
    
    func TestGetBook(t *testing.T) {
    	req, err := http.NewRequest("GET", "/books/123e4567-e89b-12d3-a456-426655440000", nil)
    	if err!= nil {
    		t.Fatal(err)
    	}
    
    	rec := httptest.NewRecorder()
    	handler := http.HandlerFunc(getBook)
    	router := mux.NewRouter()
    	router.HandleFunc("/books/{id}", handler)
    	router.ServeHTTP(rec, req)
    
    	var book Book
    	err = json.Unmarshal(rec.Body.Bytes(), &book)
    	if err!= nil {
    		t.Fatalf("Failed to unmarshal response body: %v", err)
    	}
    
    	expectedBook := Book{
    		ID:   "123e4567-e89b-12d3-a456-426655440000",
    		Name: "<NAME>",
    		Year: 1851,
    		Tags: []string{},
    	}
    
    	if!reflect.DeepEqual(book, expectedBook) {
    		t.Errorf("Expected response body to equal:\n%#v\ngot:\n%#v", expectedBook, book)
    	}
    }